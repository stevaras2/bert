<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /home/lopez/grobid/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.5-SNAPSHOT" ident="GROBID" when="2019-03-20T09:20+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Zestimate Bazinga: Predicting Selling Price for Condos in Downtown Vancouver</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrey</forename><surname>Koch</surname></persName>
							<email>andkoch@stanford.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marina</forename><forename type="middle">K</forename><surname>Peremyslova</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lucas</forename><surname>Lemanowicz</surname></persName>
							<email>llemanowicz@stanford.edu</email>
						</author>
						<title level="a" type="main">Zestimate Bazinga: Predicting Selling Price for Condos in Downtown Vancouver</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Fun Facts:</p><p>• As the plot shows, the more expensive the condo, the more subjective the price appears to be (and the worse our model performs) • Listing price, the quintessence of a real estate agent's domain knowledge about current market situation, outperforms our best prediction with a 6x lower MSE</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>FGH(ii) Fit tree to ( /&lt; producing terminal regions I J&lt; , K = 1, . . , L &lt; (iii) For K = 1, . . , L &lt; :6 J&lt; = '()*+, -∑ D B ∈N O,F 3(4 / , ! &lt;P1 (# / ) + 6) (iv) ! &lt; (#) ∶= ! &lt;P1 (#)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head></head><label></label><figDesc>Results § Linear Regression: the large observed bias is due to limitations of linear method § Regularization with LASSO &amp; Ridge only marginally improved the error and made us try nonlinear learning methods § Regression Trees &amp; Random Forest: overfitting was addressed with decreasing maximum tree depth and lifted prediction accuracy to a new level § Neural Networks with optimal configuration gave prediction accuracy similar to the regression tree § Gradient Boosting Regression finally provided most robust and accurate model leveraging non-linear nature of interaction between features and target variable Discussion &amp; Conclusions [1] R. John, "Simple Housing Price Prediction Using Neural Networks with TensorFlow", Medium.com, May 29, 2018 [2] H. Yu and J. Wu, "Real Estate Price Prediction with Regression and Classification" (2016) [3] TensorFlow, https://www.tensorflow.org/api_docs/python/tf [4] scikit-learn, https://scikit-learn.org/stable/ [5] matplotlib, https://matplotlib.org/ References Model: Gradient Boosting Implementation Model: Neural Network Implementation There is more work to be done around modeling the temporal aspect of condo prices. Further feature engineering (30 day sale volume) and data collection (new condo developments under construction) would likely further improve our model's accuracy.Future WorkUsed Google Maps API to map condo addresses to (lat, lon) coordinates and further mapped to a rectangular grid to approximate neighborhood.Total sales area is ~9 km 2 . § 48 features modelled § NLP used to create "view score" feature § Categorical features were one-hot encoded § Numerical features normalized (mean + standard deviation) § Missing data in some features was imputed § Experimented with various layer depths + sizes, and activation functions. In general deeper networks with smaller layers performed better. § Overfitting was initially very high (test dataset had 10x MSE of train). Use of a dropout function after first layer, and running a 5-Fold CV reduced difference to less than 15% § Hyper-parameters with 100 estimators and max</figDesc><table>Research Overview 

Data Exploration 

Feature Engineering 

Discussion &amp; Conclusions 

[1] R. John, "Simple Housing Price Prediction Using Neural Networks 
with TensorFlow", Medium.com, May 29, 2018 
[2] H. Yu and J. Wu, "Real Estate Price Prediction with Regression 
and Classification" (2016) 
[3] TensorFlow, https://www.tensorflow.org/api_docs/python/tf 
[4] scikit-learn, https://scikit-learn.org/stable/ 
[5] matplotlib, https://matplotlib.org/ 

References 

Model: Gradient Boosting Implementation 

Model: Neural Network Implementation 

There is more work to be done around modeling the 
temporal aspect of condo prices. Further feature engineering 
(30 day sale volume) and data collection (new condo 
developments under construction) would likely further 
improve our model's accuracy. 

Future Work 

Used Google Maps API to map 
condo addresses to (lat, lon) 
coordinates and further mapped to 
a rectangular grid to approximate 
neighborhood. 

Total sales area is ~9 km 2 . 

 § 48 features modelled 
 § NLP used to create "view 
score" feature 
 § Categorical features were 
one-hot encoded 
 § Numerical features 
normalized (mean + 
standard deviation) 
 § tree depth 3 produced best results in 
accuracy/generalization trade-off 
 § Feature subset selected by LASSO gained no 
improvement 
 § Hyper-parameter optimization search improved 
CV error but rendered variance unacceptable 
 § Doubling estimator count and restricting max 
number of features used at split to log(# 
features) gave error and variance estimates close 
to default 

Model 
R 2 (train) 
R 2 (CV) 
MSE (train) 
MSE (CV) 
MSE (CV) / 
MSE (train) 
R 2 (test) 
MSE (test) 

Linear 
Regression 

0.8154 
0.8066 
0.1839 
0.1922 
1.0452 
0.8032 
0.1998 

LinReg + LASSO 

0.8136 
0.8033 
0.1857 
0.1955 
1.0529 
0.8023 
0.2006 

LinReg + Ridge 

0.8150 
0.8066 
0.1843 
0.1922 
1.0426 
0.8029 
0.2000 

Regression Tree 

0.9512 
0.8584 
0.0486 
0.1420 
2.9212 
0.8587 
0.1434 

Random Forest 

0.9554 
0.8950 
0.0444 
0.1042 
2.3442 
0.9033 
0.0981 

Gradient 
Boosting 

0.9200 
0.8993 
0.0797 
0.1000 
1.2545 
0.9069 
0.0945 

Neural Network 

0.8470 
0.8278 
0.1525 
0.1750 
1.1480 
0.8325 
0.1699 

Top features highly correlated with 
Sold Price: 
 § Number of bedrooms 
 § Number of bathrooms 
 § Total Floor Area 
 § Number of Parking Spaces 
 § Maintenance Fees 
 § Gross Taxes 

</table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
